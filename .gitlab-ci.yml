# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

default:
  image:
    name: cypress/included:15.1.0
    entrypoint: [""]

stages: # List of stages for jobs, and their order of execution
  - install
  - format
  - lint
  - check
  - unit
  - integration
  - e2e
  - scan
  - release

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHA
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  SONAR_TOKEN: "${SONAR_TOKEN}"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - node_modules/

install-dependencies-job:
  stage: install
  script:
    - npm install
  artifacts:
    when: on_success

format-code-job:
  stage: format
  script:
    - npm run format
  artifacts:
    when: on_success
  needs:
    - install-dependencies-job

lint-code-job:
  stage: lint
  script:
    - npm run lint
  artifacts:
    when: on_success
  needs:
    - format-code-job

type-check-job:
  stage: check
  script:
    - npm run type-check
  artifacts:
    when: on_success
  needs:
    - lint-code-job

unit-test-job:
  stage: unit
  script:
    - npm run test:ut:coverage
    - cd coverage
    - dir
  artifacts:
    paths:
      - coverage/
    when: on_success
  needs:
    - type-check-job

integration-test-job:
  stage: integration
  script:
    - npm run test:it
  artifacts:
    when: on_success
  needs:
    - unit-test-job

e2e-test-job:
  stage: e2e
  services:
    - name: docker:dind
      alias: docker
  script:
    - npm run test:e2e
  artifacts:
    when: on_success
  needs:
    - integration-test-job

sonarcloud-scan-job:
  stage: scan
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - npm ci
    - cd coverage
    - dir
    - cd..
    - sonar-scanner
  artifacts:
    when: on_success
  needs:
    - unit-test-job

docker-build-job:
  image: docker:latest
  services:
    - docker:dind
  stage: release
  script:
    - docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -t ${DOCKER_IMAGE}:latest .
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
    - docker push ${DOCKER_IMAGE}:latest
  only:
    - main
  artifacts:
    when: on_success


workflow:
  rules:
    - when: always
